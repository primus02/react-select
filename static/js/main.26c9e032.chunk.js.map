{"version":3,"sources":["FetchUser.js","ListUser.js","App.js","reportWebVitals.js","index.js"],"names":["FetchUser","data","useState","option","setOption","userNames","map","user","id","value","name","label","options","onChange","className","ListUser","users","setUsers","isMulti","selectedOption","App","useEffect","fetchUsers","a","fetch","json","mainData","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RA2BeA,MAxBf,YAA2B,IAAPC,EAAM,EAANA,KAAM,EAGGC,mBAAS,IAHZ,mBAGhBC,EAHgB,KAGRC,EAHQ,KAWhBC,EAAYJ,EAAKK,KAAI,SAAAC,GAAI,MAC3B,CAACC,GAAID,EAAKC,GAAIC,MAAOF,EAAKG,KAAMC,MAAOJ,EAAKG,SAIhD,OACI,gCACI,cAAC,IAAD,CAAQE,QAASP,EAAWI,MAAON,EAAQU,SAblC,SAACV,GACfC,EAAUD,MAaL,oBAAGW,UAAU,WAAb,+BAA0C,iCAASX,EAAOM,QAA1D,gBAAsF,iCAASN,EAAOK,YCUnGO,MA5Bf,YAA0B,IAAPd,EAAM,EAANA,KAAM,EACKC,mBAAS,IADd,mBACdC,EADc,KACNC,EADM,OAEGF,mBAAS,IAFZ,mBAEdc,EAFc,KAEPC,EAFO,KAadZ,EAAYJ,EAAKK,KAAI,SAAAC,GAAI,MAC3B,CAACC,GAAID,EAAKC,GAAIC,MAAOF,EAAKG,KAAMC,MAAOJ,EAAKG,SAIjD,OACI,gCACI,cAAC,IAAD,CAAQQ,SAAO,EAACN,QAASP,EAAWI,MAAON,EAAQU,SAhBzC,SAACV,GAEfC,EAAUD,GAGVc,EAASd,MAYJa,EAAMV,KAAI,SAAAa,GAAc,OACrB,oBAAIL,UAAU,OAAd,SAA8CK,EAAeV,OAAnCU,EAAeX,WCQ1CY,MA7Bf,WACEC,qBAAU,WACPC,MACD,IAHW,MAKapB,mBAAS,IALtB,mBAKJc,EALI,KAKGC,EALH,KAOJK,EAAU,uCAAE,8BAAAC,EAAA,+EAECC,MAAM,8CAFP,cAEXvB,EAFW,gBAGMA,EAAKwB,OAHX,OAGXC,EAHW,OAKjBC,QAAQC,IAAIF,GACZT,EAASS,GANQ,kDASXC,QAAQC,IAAR,MATW,kEAAF,qDAcnB,OACE,sBAAKd,UAAU,MAAf,UACI,cAAC,EAAD,CAAWb,KAAMe,IACjB,cAAC,EAAD,CAAUf,KAAMe,QCjBTa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.26c9e032.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nfunction FetchUser({data}){\r\n\r\n    // Set Selected Option\r\n   const [option, setOption]=useState(\"\");\r\n   \r\n   const fetchOption=(option)=>{\r\n       setOption(option);\r\n   };\r\n\r\n\r\n    //  Set Select Options\r\n    const userNames = data.map(user=> (\r\n        {id: user.id, value: user.name, label: user.name}\r\n    ));\r\n\r\n\r\n    return(\r\n        <div>\r\n            <Select options={userNames} value={option} onChange={fetchOption}/>\r\n            <p className=\"selected\">You have selected <strong>{option.value}</strong> whose id is <strong>{option.id}</strong></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FetchUser;","import React, {useState} from \"react\";\r\nimport Select from \"react-select\";\r\n\r\n\r\nfunction ListUser({data}){\r\n    const [option, setOption]=useState(\"\");\r\n    const [users, setUsers]=useState([]);\r\n\r\n    const fetchOption=(option)=>{\r\n        // Set selected option\r\n        setOption(option);\r\n\r\n        // Set all selected options\r\n        setUsers(option);\r\n    };\r\n \r\n       // Set Select Options \r\n     const userNames = data.map(user=> (\r\n         {id: user.id, value: user.name, label: user.name}\r\n     ));\r\n\r\n\r\n    return(\r\n        <div>\r\n            <Select isMulti options={userNames} value={option} onChange={fetchOption}/>\r\n            {users.map(selectedOption=> (\r\n                <h4 className=\"list\" key={selectedOption.id}>{selectedOption.value}</h4>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListUser;","import React, {useState, useEffect} from \"react\";\nimport './App.css';\nimport FetchUser from \"./FetchUser\";\nimport ListUser from \"./ListUser\";\n\nfunction App() {\n  useEffect(()=>{\n     fetchUsers();\n  },[]);\n\n    const [users, setUsers]=useState([]);\n\n     const fetchUsers= async()=>{\n       try{\n      const data= await fetch(\"https://jsonplaceholder.typicode.com/users\")\n      const mainData = await data.json();\n\n      console.log(mainData);\n      setUsers(mainData);\n       }\n       catch(err){\n            console.log(err);\n       };\n     };\n    \n\n  return (\n    <div className=\"App\">\n        <FetchUser data={users}/>\n        <ListUser data={users}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}